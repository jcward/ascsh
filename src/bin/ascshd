#!/usr/bin/env ruby

require 'socket'

args = ARGV.clone
if (args[0]=='-p') then
  # Port specified via commandline
  $port = args[1]
  args.shift
  args.shift
else
  # Default - different port per user
  $port = 27839+`id -u`.to_i rescue 27839
end

if (args[0]=='killall') then
  begin
    procs = `pgrep -f 'ruby.*ascshd'`.split("\n")
    procs.reject! { |pid| pid.to_i == Process.pid }
    puts "Killing #{procs.length-1} ascshd instances..."
    `kill #{procs.join(" ")} 2>/dev/null`
  rescue
    puts "Your OS doesn't seem to support killall!"
  end
  exit
end

$hostname = 'localhost'
$ascsh_bin = ENV["AIR_SDK_HOME"].gsub('\\', '/')+"/bin/ascsh"

class Server
  ASCSH_PROMPT = "(ascsh) "
  @output_buffer = ""
  def self.read_until_prompt(proc)
    @output_buffer << proc.readpartial(256) until
      @output_buffer.include? ASCSH_PROMPT
    output, @output_buffer =
      @output_buffer.split(ASCSH_PROMPT, 2)
    output
  rescue EOFError
    raise "Error reading ascsh output"
  end

  # Server feeds the ascsh process
  def self.ascshd_server
    server = TCPServer.open($port)
    ascsh_process = IO.popen($ascsh_bin+" 2>&1", "r+")
    read_until_prompt(ascsh_process)

    loop {
      client = server.accept
      cmd = client.gets
      next if (cmd==nil || cmd.length<1)
      cmd.strip!

      case cmd
        when "kill"
        puts "ascshd server exiting"
        ascsh_process.close
        ascsh_process = nil
        exit
      else
        begin
          ascsh_process.puts(cmd)
          result = read_until_prompt(ascsh_process)
          result.split("\n").each { |line| client.puts(line) }
        rescue Errno::EPIPE
          puts "Error, ascsh communication interrupted, compile status unknown"
        end
        client.close rescue nil
      end
    }
  end

  def self.start_server
    pid = fork do
      ascshd_server()
    end
    puts "Starting aschd server, v0.5, port #{$port}, pid #{pid}, #{$ascsh_bin}"
    sleep 0.5 # wait for server to start
  end

end

# Check for AIR SDK with ascsh installed
raise "Cannot find ascsh at \$AIR_HOME/bin/ascsh" unless File.exist?($ascsh_bin)

$is_kill = args[0]=='kill'
raise "Cannot use kill with other operations" if ($is_kill && args.length>1)
raise "Invalid argument '#{args[0]}' (valid args are kill, mxmlc, and compc)" unless ["kill", "server", "mxmlc", "compc"].include?(args[0])

# Check if server is running
$is_running = false
begin
  s = TCPSocket.open($hostname, $port)
  $is_running = true
rescue Errno::ECONNREFUSED
  if $is_kill then
    puts "ascshd is not running."
    exit
  end
end

# handle kill
if ($is_kill) then
  if (!$is_running) then
    puts "Server isn't running"
    exit
  end
  puts "Killing server..."
  s.puts "kill"
  sleep 0.5
  exit
end

# handle server
if (args[0]=='server') then
  if ($is_running) then
    puts "Server already running on port #{$port}"
    s.close
    exit
  end
  raise "Cannot use server with other operations" if (args.length>1)
  Server.start_server()
  exit
end

# send command (and start if not running)
if (!$is_running) then
  Server.start_server()
  sleep 0.5 # wait for server to start
  s = TCPSocket.open($hostname, $port)
end

s.puts args.join('|x|') # split token in ascsh
while (line=s.gets) do puts line end
s.close
